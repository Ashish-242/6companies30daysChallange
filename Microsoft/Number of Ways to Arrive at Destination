class Solution {
    class Pair  {
        int v;
        int w;
        Pair(int v,int w){
            this.v=v;
            this.w=w;
        }
        
    }
    public int countPaths(int n, int[][] roads) {
        int mod=(int)(1e9+7);
        ArrayList<ArrayList<Pair>> graph=new ArrayList<>();
        for(int i=0;i<n;i++){
            graph.add(new ArrayList<Pair>());
        }
        for(int i=0;i<roads.length;i++){
            int x=roads[i][0];
            int y=roads[i][1];
            int t=roads[i][2];
            graph.get(x).add(new Pair(y,t));
            graph.get(y).add(new Pair(x,t));

        }
        // distance array
        int[] dist=new int[n];
        Arrays.fill(dist,Integer.MAX_VALUE);
        dist[0]=0;
        // count array to count no of ways to reach that node
        int[] count=new int[n];
        count[0]=1;
        PriorityQueue<Pair> pq=new PriorityQueue<>((a,b)->a.w-b.w);
        // sorting take place
        Pair a=new Pair(0,0);
        pq.offer(a);
        while(!pq.isEmpty()){
            Pair f=pq.poll();

            for(Pair e:graph.get(f.v)){
                if(e.w+f.w<dist[e.v]){
                    dist[e.v]=e.w+f.w;
                    pq.add(new Pair(e.v,dist[e.v]));
                    count[e.v]=count[f.v];
                }else if(e.w+f.w==dist[e.v]){
                    count[e.v]=(count[e.v]+count[f.v])%mod;
                }
            }

        }
        return count[n-1]%mod;
    }
    
}
